# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'tempfile'

Vagrant.configure("2") do |config|
  # Must be compatible with an UbuntuServer from `az vm image list --output table`
  config.vm.box = "ubuntu/disco64"

  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope = :box
    config.cache.auto_detect = false
  end
  if Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.enabled = false
  end

  config.vm.provider :azure do |azure, override|
    override.vm.box = 'double16/packer'
    azure.vm_size = 'Standard_D4S_v3'
    azure.vm_image_urn = 'Canonical:UbuntuServer:19.04:19.04.201910030'
    override.ssh.private_key_path = "#{ENV['HOME']}/.ssh/id_rsa"
    if Vagrant.has_plugin?("vagrant-sshfs")
      override.vm.synced_folder "..", "/vagrant", type: "sshfs"
    else
      override.vm.synced_folder "..", "/vagrant", type: "rsync"
    end
    azure.data_disks = [
        {
          name: "boxes",
          size_gb: 200
        }
    ]
    override.vm.provision "data_volume", type: "shell", inline: <<-SHELL

    SHELL
  end

  config.vm.provider :aws do |aws, override|
    override.vm.box = 'dimroc/awsdummy'
    aws.ami = 'ami-04b9e92b5572fa0d1' # Ubuntu Server 18.04 LTS (HVM), SSD Volume Type
    override.ssh.username = 'ubuntu'
    aws.keypair_name = "PatrickDoubleOPI2"
    override.ssh.private_key_path = "/Users/double/.ssh/id_aws.pem"
    if Vagrant.has_plugin?("vagrant-sshfs")
      override.vm.synced_folder "..", "/vagrant", type: "sshfs"
    else
      override.vm.synced_folder "..", "/vagrant", type: "rsync"
    end
    aws.block_device_mapping = [{ 'DeviceName' => '/dev/sda1', 'Ebs.VolumeSize' => 200 }]
  end

  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.no_install = false
  end
  if Vagrant.has_plugin?("vagrant-disksize")
    config.disksize.size = '200GB'
    config.vm.provision "disksize", type: "shell", path: "../environments/dev/modules/private/files/disksize.sh"
  end
  config.vm.provider :virtualbox do |vb, override|
    vb.memory = 6144
    vb.cpus = 4
    # 2020-01 ubuntu/* boxes use serial output for grub, which causes extreme slow booting because the serial port is disconnected. This connects to a file to avoid the issue.
    vb.customize ["modifyvm", :id, "--uartmode1", "file", Tempfile.create().path]
    vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
    vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
    vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
    vb.customize ["modifyvm", :id, "--paravirtprovider", "default"]
    override.vm.synced_folder "..", "/vagrant"
    override.vm.provision "hostname_fix", type: "shell", inline: <<-SHELL
      grep -q "${HOSTNAME}" /etc/hosts || echo "127.0.0.1  ${HOSTNAME}" >> /etc/hosts
    SHELL
  end
  config.vm.provision "builder", type: "shell",
    env: { yum_proxy: ENV['YUM_PROXY'] || ENV['yum_proxy'], DEBIAN_FRONTEND: 'noninteractive' },
    inline: <<-SHELL
      set -x -e

      if [ -n "$yum_proxy" ] && ! grep -qF "${yum_proxy}" /etc/apt/apt.conf.d/01proxy && wget -t 1 -O /dev/null "${yum_proxy}acng-report.html"; then
          cat >/etc/apt/apt.conf.d/01proxy <<EOF
Acquire::HTTP::Proxy "${yum_proxy}";
Acquire::HTTPS::Proxy false;
EOF
      elif [ -f /etc/apt/apt.conf.d/01proxy ]; then
        rm /etc/apt/apt.conf.d/01proxy
      fi

      pick_copy() {
        local src="$1"
        local dest="$2"
        for D in /tmp /vagrant /vagrant/builder; do
          test -f "${D}/${src}" && cp "${D}/${src}" "${dest}" && break
        done
      }

      pick_copy 10-link-local.yaml /etc/netplan/10-link-local.yaml
      netplan apply
      sleep 5s

      curl -fsSL https://www.virtualbox.org/download/oracle_vbox_2016.asc | apt-key add -
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
      add-apt-repository "deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib"
      add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      apt-get update
      apt-get install -y build-essential linux-headers-$(uname -r) unzip git screen tmux htop qemu qemu-kvm ruby awscli iftop jq php curl docker-ce docker-compose coreutils zsh zsh-syntax-highlighting
      apt-get install -y virtualbox-6.1
      test -f /etc/apt/apt.conf.d/01proxy && mkdir -p /etc/systemd/system/docker.service.d && echo -e \"[Service]\nEnvironment=\\\"HTTP_PROXY=${yum_proxy}\\\"\nEnvironment=\\\"HTTPS_PROXY=${yum_proxy}\\\"\nEnvironment=\\\"NO_PROXY=127.0.0.1,localhost\\\"\" > /etc/systemd/system/docker.service.d/http-proxy.conf && systemctl daemon-reload
      systemctl enable docker

      /bin/grep -q '^vagrant:' /etc/group || /usr/sbin/groupadd vagrant
      /bin/grep -q '^wheel:' /etc/group || /usr/sbin/groupadd wheel
      /bin/grep -q '^vagrant:' /etc/passwd || /usr/sbin/useradd vagrant -m -g vagrant -G wheel,kvm,docker,vboxusers
      /bin/grep -q '^docker:.*vagrant' /etc/group || /usr/sbin/usermod vagrant -G wheel,kvm,docker,vboxusers
      sed -i 's|/home/vagrant:/bin/bash|/home/vagrant:/bin/zsh|' /etc/passwd

      if [ ! -f /etc/apt/apt.conf.d/01proxy ]; then
        pick_copy aptcache-compose.yml /home/vagrant/aptcache-compose.yml
        docker-compose -p cache -f /home/vagrant/aptcache-compose.yml up -d
        yum_proxy="http://169.254.169.253:3142"
          cat >/etc/apt/apt.conf.d/01proxy <<EOF
Acquire::HTTP::Proxy "${yum_proxy}";
Acquire::HTTPS::Proxy false;
EOF
        mkdir -p /etc/systemd/system/docker.service.d && echo -e \"[Service]\nEnvironment=\\\"HTTP_PROXY=${yum_proxy}\\\"\nEnvironment=\\\"HTTPS_PROXY=${yum_proxy}\\\"\nEnvironment=\\\"NO_PROXY=127.0.0.1,localhost\\\"\" > /etc/systemd/system/docker.service.d/http-proxy.conf && systemctl daemon-reload
        systemctl reload docker
      fi

      test -f /etc/apt/apt.conf.d/01proxy && \
        echo \"--proxy ${yum_proxy}\" >> /root/.curlrc && \
        echo \"--proxy ${yum_proxy}\" >> /home/vagrant/.curlrc

      test -d /home/vagrant/.oh-my-zsh || su -c 'git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh' - vagrant
      grep -q ZSH_THEME /home/vagrant/.zshrc || su -c 'cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc' - vagrant
      /usr/bin/sed -i 's/ZSH_THEME=.*/ZSH_THEME=\"agnoster\"/' /home/vagrant/.zshrc
      /usr/bin/sed -i 's/plugins=.*/plugins=(git vagrant tmux docker docker-compose go golang)/' /home/vagrant/.zshrc
      test -f /etc/apt/apt.conf.d/01proxy && \
        echo \"export yum_proxy=${yum_proxy}\" >> /home/vagrant/.zshrc && \
        echo \"export YUM_PROXY=${yum_proxy}\" >> /home/vagrant/.zshrc && \
        echo \"export VAGRANT_CLOUD_TOKEN=\" >> /home/vagrant/.zshrc && \
        chown vagrant:vagrant /home/vagrant/.zshrc

      test -d "/data" && \
        sh -c "mkdir /data/virtualbox && vboxmanage setproperty machinefolder /data/virtualbox" - vagrant

      packer version 2>/dev/null | grep -qF '1.5.1' || (
        curl -sL --fail -o /tmp/packer.zip https://releases.hashicorp.com/packer/1.5.1/packer_1.5.1_linux_amd64.zip
        cd /usr/bin && unzip -o /tmp/packer.zip && chmod +x /usr/bin/packer
        rm /tmp/packer.zip
      )

      vagrant version 2>/dev/null | grep -qF '2.2.7' || (
        curl -sL -o /tmp/vagrant_2.2.7_x86_64.deb https://releases.hashicorp.com/vagrant/2.2.7/vagrant_2.2.7_x86_64.deb
        dpkg -i /tmp/vagrant_2.2.7_x86_64.deb
        rm /tmp/vagrant_2.2.7_x86_64.deb
      )
      su -c 'vagrant plugin install vagrant-cachier vagrant-vbguest vagrant-azure vagrant-aws' - vagrant

      su -c 'curl -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | zsh' - vagrant

      pick_copy vagrant-upload.sh /home/vagrant/vagrant-upload.sh
      chown vagrant:vagrant /home/vagrant/vagrant-upload.sh
      chmod +x /home/vagrant/vagrant-upload.sh
    SHELL

  config.vm.provision "vagrant-dotfiles", type: "shell", inline: <<-SHELL
    mkdir -p /var/local/vagrant/machines/default
    chown -R vagrant:vagrant /var/local/vagrant
    [ -e /var/local/vagrant/machines/default/cache ] || ln -sf /vagrant/.vagrant/machines/default/cache /var/local/vagrant/machines/default/cache
    if ! grep -q 'VAGRANT_DOTFILE_PATH=' /home/vagrant/.bashrc; then
      echo "export VAGRANT_DOTFILE_PATH=/var/local/vagrant" >> /home/vagrant/.bashrc
    fi
  SHELL
end
